{"ast":null,"code":"const firebaseAdmin = require('firebase-admin');\n\nconst serviceAccount = require('../../service-account.json');\n\nconst Cookies = require('cookies');\n\nconst SpotifyWebApi = require('spotify-web-api-node');\n\nif (!firebaseAdmin.apps.length) {\n  firebaseAdmin.initializeApp({\n    credential: firebaseAdmin.credential.cert(serviceAccount),\n    databaseURL: process.env.FIREBASE_DATABASE_URL\n  });\n}\n\nconst Spotify = new SpotifyWebApi({\n  clientId: process.env.SPOTIFY_CLIENT_ID,\n  clientSecret: process.env.SPOTIFY_CLIENT_SECRET,\n  redirectUri: process.env.AUTH_REDIRECT_URL\n});\nexport default function handler(req, res) {\n  const cookies = new Cookies(req, res);\n\n  try {\n    if (!cookies.get('verificationState')) {\n      console.error('verificationState cookie not set');\n      throw new Error('State cookie not set or expired. Maybe you took too long to authorize. Please try again.');\n    } else if (cookies.get('verificationState') !== req.query.state) {\n      throw new Error('State validation failed');\n    }\n\n    Spotify.authorizationCodeGrant(req.query.code, (error, data) => {\n      if (error) {\n        throw error;\n      }\n\n      Spotify.setAccessToken(data.body['access_token']);\n      Spotify.getMe(async (error, userResults) => {\n        if (error) {\n          throw error;\n        }\n\n        const accessToken = data.body['access_token'];\n        const spotifyUserID = userResults.body['id'];\n        const profilePic = userResults.body['images'][0]['url'];\n        const userName = userResults.body['display_name'];\n        const email = userResults.body['email'];\n        const firebaseToken = await createFirebaseAccount(spotifyUserID, userName, profilePic, email, accessToken);\n        cookies.set('firebaseToken', firebaseToken);\n        res.writeHead(301, {\n          Location: '/'\n        });\n        res.end();\n      });\n    });\n  } catch (error) {\n    res.send('error');\n  }\n}\n/**\n * Creates a Firebase account with the given user profile and returns a custom auth token allowing\n * signing-in this account.\n * Also saves the accessToken to the datastore at /spotifyAccessToken/$uid\n *\n * @returns {Promise<string>} The Firebase custom auth token in a promise.\n */\n\nasync function createFirebaseAccount(spotifyID, displayName, photoURL, email, accessToken) {\n  // The UID we'll assign to the user.\n  const uid = `spotify:${spotifyID}`; // Save the access token to the Firebase Realtime Database.\n\n  const databaseTask = firebaseAdmin.database().ref(`/spotifyAccessToken/${uid}`).set(accessToken); // Create or update the user account.\n\n  const userCreationTask = firebaseAdmin.auth().updateUser(uid, {\n    displayName: displayName,\n    photoURL: photoURL,\n    email: email,\n    emailVerified: true\n  }).catch(error => {\n    // If user does not exists we create it.\n    if (error.code === 'auth/user-not-found') {\n      firebaseAdmin.auth().createUser({\n        uid: uid,\n        displayName: displayName,\n        photoURL: photoURL,\n        email: email,\n        emailVerified: true\n      });\n    } else {\n      throw error;\n    }\n  }); // Wait for all async tasks to complete, then generate and return a custom auth token.\n\n  await Promise.all([userCreationTask, databaseTask]); // Create a Firebase custom auth token.\n\n  const token = await firebaseAdmin.auth().createCustomToken(uid);\n  console.log('Created Custom token for UID \"', uid, '\" Token:', token);\n  return token;\n}","map":null,"metadata":{},"sourceType":"module"}