{"ast":null,"code":"const firebaseAdmin = require('firebase-admin');\n\nconst serviceAccount = require('../../service-account.json');\n\nconst Cookies = require('cookies');\n\nconst SpotifyWebApi = require('spotify-web-api-node');\n\nif (!firebaseAdmin.apps.length) {\n  firebaseAdmin.initializeApp({\n    credential: firebaseAdmin.credential.cert(serviceAccount),\n    databaseURL: process.env.FIREBASE_DATABASE_URL\n  });\n}\n\nconst Spotify = new SpotifyWebApi({\n  clientId: process.env.SPOTIFY_CLIENT_ID,\n  clientSecret: process.env.SPOTIFY_CLIENT_SECRET,\n  redirectUri: process.env.AUTH_REDIRECT_URL\n});\nexport default function handler(req, res) {\n  const cookies = new Cookies(req, res);\n\n  try {\n    if (!cookies.get('verificationState')) {\n      console.error('verificationState cookie not set');\n      throw new Error('State cookie not set or expired. Maybe you took too long to authorize. Please try again.');\n    } else if (cookies.get('verificationState') !== req.query.state) {\n      throw new Error('State validation failed');\n    }\n\n    Spotify.authorizationCodeGrant(req.query.code, (error, data) => {\n      if (error) {\n        throw error;\n      }\n\n      Spotify.setAccessToken(data.body['access_token']);\n      Spotify.getMe(async (error, userResults) => {\n        if (error) {\n          throw error;\n        }\n\n        const accessToken = data.body['access_token'];\n        const spotifyUserID = userResults.body['id'];\n        const profilePic = userResults.body['images'][0]['url'];\n        const userName = userResults.body['display_name'];\n        const email = userResults.body['email'];\n        const firebaseToken = await createFirebaseAccount(spotifyUserID, userName, profilePic, email, accessToken);\n        cookies.set('firebaseToken', firebaseToken);\n        res.writeHead(301, {\n          Location: '/'\n        });\n        res.end();\n      });\n    });\n  } catch (error) {\n    res.send('error');\n  }\n}\n/**\n * Creates a Firebase account with the given user profile and returns a custom auth token allowing\n * signing-in this account.\n * Also saves the accessToken to the datastore at /spotifyAccessToken/$uid\n *\n * @returns {Promise<string>} The Firebase custom auth token in a promise.\n */\n\nasync function createFirebaseAccount(spotifyID, displayName, photoURL, email, accessToken) {\n  // The UID we'll assign to the user.\n  const uid = `spotify:${spotifyID}`; // Save the access token to the Firebase Realtime Database.\n\n  const databaseTask = firebaseAdmin.database().ref(`/spotifyAccessToken/${uid}`).set(accessToken); // Create or update the user account.\n\n  const userCreationTask = firebaseAdmin.auth().updateUser(uid, {\n    displayName: displayName,\n    photoURL: photoURL,\n    email: email,\n    emailVerified: true\n  }).catch(error => {\n    // If user does not exists we create it.\n    if (error.code === 'auth/user-not-found') {\n      firebaseAdmin.auth().createUser({\n        uid: uid,\n        displayName: displayName,\n        photoURL: photoURL,\n        email: email,\n        emailVerified: true\n      });\n    } else {\n      throw error;\n    }\n  }); // Wait for all async tasks to complete, then generate and return a custom auth token.\n\n  await Promise.all([userCreationTask, databaseTask]); // Create a Firebase custom auth token.\n\n  const token = await firebaseAdmin.auth().createCustomToken(uid);\n  console.log('Created Custom token for UID \"', uid, '\" Token:', token);\n  return token;\n}","map":{"version":3,"sources":["/mnt/c/Users/ajtwi/git/MusicJournal/music-journal/src/client/pages/api/spotify-redirect.js"],"names":["firebaseAdmin","require","serviceAccount","Cookies","SpotifyWebApi","apps","length","initializeApp","credential","cert","databaseURL","process","env","FIREBASE_DATABASE_URL","Spotify","clientId","SPOTIFY_CLIENT_ID","clientSecret","SPOTIFY_CLIENT_SECRET","redirectUri","AUTH_REDIRECT_URL","handler","req","res","cookies","get","console","error","Error","query","state","authorizationCodeGrant","code","data","setAccessToken","body","getMe","userResults","accessToken","spotifyUserID","profilePic","userName","email","firebaseToken","createFirebaseAccount","set","writeHead","Location","end","send","spotifyID","displayName","photoURL","uid","databaseTask","database","ref","userCreationTask","auth","updateUser","emailVerified","catch","createUser","Promise","all","token","createCustomToken","log"],"mappings":"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","sourcesContent":["const firebaseAdmin = require('firebase-admin');\nconst serviceAccount = require('../../service-account.json');\nconst Cookies = require('cookies');\nconst SpotifyWebApi = require('spotify-web-api-node');\n\nif (!firebaseAdmin.apps.length) {\n  firebaseAdmin.initializeApp({\n    credential: firebaseAdmin.credential.cert(serviceAccount),\n    databaseURL: process.env.FIREBASE_DATABASE_URL,\n  });\n}\n\nconst Spotify = new SpotifyWebApi({\n  clientId: process.env.SPOTIFY_CLIENT_ID,\n  clientSecret: process.env.SPOTIFY_CLIENT_SECRET,\n  redirectUri: process.env.AUTH_REDIRECT_URL,\n});\n\nexport default function handler(req, res) {\n  const cookies = new Cookies(req, res);\n  try {\n    if (!cookies.get('verificationState')) {\n      console.error('verificationState cookie not set');\n      throw new Error('State cookie not set or expired. Maybe you took too long to authorize. Please try again.');\n    } else if (cookies.get('verificationState') !== req.query.state) {\n      throw new Error('State validation failed');\n    }\n    Spotify.authorizationCodeGrant(req.query.code, (error, data) => {\n      if (error) {\n        throw error;\n      }\n      Spotify.setAccessToken(data.body['access_token']);\n\n      Spotify.getMe(async (error, userResults) => {\n        if (error) {\n          throw error;\n        }\n        const accessToken = data.body['access_token'];\n        const spotifyUserID = userResults.body['id'];\n        const profilePic = userResults.body['images'][0]['url'];\n        const userName = userResults.body['display_name'];\n        const email = userResults.body['email'];\n        const firebaseToken = await createFirebaseAccount(spotifyUserID, userName, profilePic, email, accessToken);\n        cookies.set('firebaseToken', firebaseToken);\n        res.writeHead(301, {\n          Location: '/',\n        });\n        res.end();\n      });\n    });\n  } catch (error) {\n    res.send('error');\n  }\n}\n\n/**\n * Creates a Firebase account with the given user profile and returns a custom auth token allowing\n * signing-in this account.\n * Also saves the accessToken to the datastore at /spotifyAccessToken/$uid\n *\n * @returns {Promise<string>} The Firebase custom auth token in a promise.\n */\nasync function createFirebaseAccount(spotifyID, displayName, photoURL, email, accessToken) {\n  // The UID we'll assign to the user.\n  const uid = `spotify:${spotifyID}`;\n\n  // Save the access token to the Firebase Realtime Database.\n  const databaseTask = firebaseAdmin.database().ref(`/spotifyAccessToken/${uid}`).set(accessToken);\n\n  // Create or update the user account.\n  const userCreationTask = firebaseAdmin.auth().updateUser(uid, {\n    displayName: displayName,\n    photoURL: photoURL,\n    email: email,\n    emailVerified: true,\n  }).catch((error) => {\n    // If user does not exists we create it.\n    if (error.code === 'auth/user-not-found') {\n      firebaseAdmin.auth().createUser({\n        uid: uid,\n        displayName: displayName,\n        photoURL: photoURL,\n        email: email,\n        emailVerified: true,\n      });\n    } else {\n      throw error;\n    }\n  });\n\n  // Wait for all async tasks to complete, then generate and return a custom auth token.\n  await Promise.all([userCreationTask, databaseTask]);\n  // Create a Firebase custom auth token.\n  const token = await firebaseAdmin.auth().createCustomToken(uid);\n  console.log('Created Custom token for UID \"', uid, '\" Token:', token);\n  return token;\n}\n"]},"metadata":{},"sourceType":"module"}