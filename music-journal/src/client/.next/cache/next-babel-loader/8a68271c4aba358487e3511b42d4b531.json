{"ast":null,"code":"export default async function handler(req, res) {\n  const firebaseAdmin = require('firebase-admin');\n\n  const firebase = require('firebase');\n\n  const serviceAccount = require('../../service-account.json');\n\n  const SpotifyWebApi = require('spotify-web-api-node');\n\n  if (!firebaseAdmin.apps.length) {\n    firebaseAdmin.initializeApp({\n      credential: firebaseAdmin.credential.cert(serviceAccount),\n      databaseURL: process.env.FIREBASE_DATABASE_URL\n    });\n  }\n\n  const Spotify = new SpotifyWebApi({\n    clientId: process.env.SPOTIFY_CLIENT_ID,\n    clientSecret: process.env.SPOTIFY_CLIENT_SECRET,\n    redirectUri: process.env.AUTH_REDIRECT_URL\n  });\n  const user = firebase.auth().currentUser;\n  const ref = await firebaseAdmin.database().ref(`/spotifyAccessToken/${user.uid}`);\n  let spotifyToken;\n  await ref.orderByValue().once(\"value\", snapshot => {\n    spotifyToken = snapshot.node_.value_;\n    Spotify.setAccessToken(spotifyToken);\n    let recentSongs = [];\n    Spotify.getMyRecentlyPlayedTracks({\n      limit: 20\n    }).then(function (data) {\n      //higher number = more time since listened\n      let recentTrackOrder = 0;\n      data.body.items.forEach(item => {\n        console.log(item.track);\n        recentSongs.push({\n          position: recentTrackOrder,\n          trackName: item.track.name,\n          description: `${item.track.name} by ${item.track.artists[0].name}`,\n          image: item.track.album.images[0],\n          track: item.track\n        });\n        recentTrackOrder += 1;\n      });\n      res.send(recentSongs);\n    }, function (err) {\n      console.log('Something went wrong!', err);\n    });\n  });\n}","map":{"version":3,"sources":["/mnt/c/Users/ajtwi/git/MusicJournal/music-journal/src/client/pages/api/recent-tracks-from-spotify.js"],"names":["handler","req","res","firebaseAdmin","require","firebase","serviceAccount","SpotifyWebApi","apps","length","initializeApp","credential","cert","databaseURL","process","env","FIREBASE_DATABASE_URL","Spotify","clientId","SPOTIFY_CLIENT_ID","clientSecret","SPOTIFY_CLIENT_SECRET","redirectUri","AUTH_REDIRECT_URL","user","auth","currentUser","ref","database","uid","spotifyToken","orderByValue","once","snapshot","node_","value_","setAccessToken","recentSongs","getMyRecentlyPlayedTracks","limit","then","data","recentTrackOrder","body","items","forEach","item","console","log","track","push","position","trackName","name","description","artists","image","album","images","send","err"],"mappings":"AAAA,eAAe,eAAeA,OAAf,CAAuBC,GAAvB,EAA4BC,GAA5B,EAAiC;AAC5C,QAAMC,aAAa,GAAGC,OAAO,CAAC,gBAAD,CAA7B;;AACA,QAAMC,QAAQ,GAAGD,OAAO,CAAC,UAAD,CAAxB;;AACA,QAAME,cAAc,GAAGF,OAAO,CAAC,4BAAD,CAA9B;;AACA,QAAMG,aAAa,GAAGH,OAAO,CAAC,sBAAD,CAA7B;;AAEA,MAAI,CAACD,aAAa,CAACK,IAAd,CAAmBC,MAAxB,EAAgC;AAC5BN,IAAAA,aAAa,CAACO,aAAd,CAA4B;AACxBC,MAAAA,UAAU,EAAER,aAAa,CAACQ,UAAd,CAAyBC,IAAzB,CAA8BN,cAA9B,CADY;AAExBO,MAAAA,WAAW,EAAEC,OAAO,CAACC,GAAR,CAAYC;AAFD,KAA5B;AAIH;;AAED,QAAMC,OAAO,GAAG,IAAIV,aAAJ,CAAkB;AAC9BW,IAAAA,QAAQ,EAAEJ,OAAO,CAACC,GAAR,CAAYI,iBADQ;AAE9BC,IAAAA,YAAY,EAAEN,OAAO,CAACC,GAAR,CAAYM,qBAFI;AAG9BC,IAAAA,WAAW,EAAER,OAAO,CAACC,GAAR,CAAYQ;AAHK,GAAlB,CAAhB;AAMA,QAAMC,IAAI,GAAGnB,QAAQ,CAACoB,IAAT,GAAgBC,WAA7B;AACA,QAAMC,GAAG,GAAG,MAAMxB,aAAa,CAACyB,QAAd,GAAyBD,GAAzB,CAA8B,uBAAsBH,IAAI,CAACK,GAAI,EAA7D,CAAlB;AACA,MAAIC,YAAJ;AAEA,QAAMH,GAAG,CAACI,YAAJ,GAAmBC,IAAnB,CAAwB,OAAxB,EAAiCC,QAAQ,IAAI;AAC/CH,IAAAA,YAAY,GAAGG,QAAQ,CAACC,KAAT,CAAeC,MAA9B;AACAlB,IAAAA,OAAO,CAACmB,cAAR,CAAuBN,YAAvB;AACA,QAAIO,WAAW,GAAG,EAAlB;AACApB,IAAAA,OAAO,CAACqB,yBAAR,CAAkC;AAC9BC,MAAAA,KAAK,EAAE;AADuB,KAAlC,EAEGC,IAFH,CAEQ,UAAUC,IAAV,EAAgB;AACpB;AACA,UAAIC,gBAAgB,GAAG,CAAvB;AACAD,MAAAA,IAAI,CAACE,IAAL,CAAUC,KAAV,CAAgBC,OAAhB,CAAwBC,IAAI,IAAI;AAC5BC,QAAAA,OAAO,CAACC,GAAR,CAAYF,IAAI,CAACG,KAAjB;AACAZ,QAAAA,WAAW,CAACa,IAAZ,CAAiB;AACbC,UAAAA,QAAQ,EAAET,gBADG;AAEbU,UAAAA,SAAS,EAAEN,IAAI,CAACG,KAAL,CAAWI,IAFT;AAGbC,UAAAA,WAAW,EAAG,GAAER,IAAI,CAACG,KAAL,CAAWI,IAAK,OAAMP,IAAI,CAACG,KAAL,CAAWM,OAAX,CAAmB,CAAnB,EAAsBF,IAAK,EAHpD;AAIbG,UAAAA,KAAK,EAAEV,IAAI,CAACG,KAAL,CAAWQ,KAAX,CAAiBC,MAAjB,CAAwB,CAAxB,CAJM;AAKbT,UAAAA,KAAK,EAAEH,IAAI,CAACG;AALC,SAAjB;AAOAP,QAAAA,gBAAgB,IAAI,CAApB;AACH,OAVD;AAWAxC,MAAAA,GAAG,CAACyD,IAAJ,CAAStB,WAAT;AACH,KAjBD,EAiBG,UAAUuB,GAAV,EAAe;AACdb,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCY,GAArC;AACH,KAnBD;AAoBH,GAxBK,CAAN;AAyBH","sourcesContent":["export default async function handler(req, res) {\n    const firebaseAdmin = require('firebase-admin');\n    const firebase = require('firebase');\n    const serviceAccount = require('../../service-account.json');\n    const SpotifyWebApi = require('spotify-web-api-node');\n\n    if (!firebaseAdmin.apps.length) {\n        firebaseAdmin.initializeApp({\n            credential: firebaseAdmin.credential.cert(serviceAccount),\n            databaseURL: process.env.FIREBASE_DATABASE_URL,\n        });\n    }\n\n    const Spotify = new SpotifyWebApi({\n        clientId: process.env.SPOTIFY_CLIENT_ID,\n        clientSecret: process.env.SPOTIFY_CLIENT_SECRET,\n        redirectUri: process.env.AUTH_REDIRECT_URL,\n    });\n\n    const user = firebase.auth().currentUser;\n    const ref = await firebaseAdmin.database().ref(`/spotifyAccessToken/${user.uid}`);\n    let spotifyToken;\n    \n    await ref.orderByValue().once(\"value\", snapshot => {\n        spotifyToken = snapshot.node_.value_;\n        Spotify.setAccessToken(spotifyToken);\n        let recentSongs = [];\n        Spotify.getMyRecentlyPlayedTracks({\n            limit: 20\n        }).then(function (data) {\n            //higher number = more time since listened\n            let recentTrackOrder = 0;\n            data.body.items.forEach(item => {\n                console.log(item.track);\n                recentSongs.push({\n                    position: recentTrackOrder,\n                    trackName: item.track.name,\n                    description: `${item.track.name} by ${item.track.artists[0].name}`,\n                    image: item.track.album.images[0],\n                    track: item.track,\n                });\n                recentTrackOrder += 1;\n            });\n            res.send(recentSongs);\n        }, function (err) {\n            console.log('Something went wrong!', err);\n        });\n    });\n}\n"]},"metadata":{},"sourceType":"module"}