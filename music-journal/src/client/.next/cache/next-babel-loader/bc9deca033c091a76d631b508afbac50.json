{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport router from 'next/router';\nimport { firebase } from './initFirebase';\nimport cookies from 'next-cookies';\n\nvar withAuth = function withAuth(Component) {\n  return /*#__PURE__*/function (_React$Component) {\n    _inherits(_class, _React$Component);\n\n    var _super = _createSuper(_class);\n\n    _createClass(_class, null, [{\n      key: \"getInitialProps\",\n      value: function () {\n        var _getInitialProps = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(ctx) {\n          var _cookies, firebaseToken, user;\n\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _cookies = cookies(ctx), firebaseToken = _cookies.firebaseToken;\n\n                  if (firebaseToken) {\n                    _context.next = 3;\n                    break;\n                  }\n\n                  return _context.abrupt(\"return\", {});\n\n                case 3:\n                  firebase.auth().signInWithCustomToken(firebaseToken)[\"catch\"](function (error) {});\n                  user = firebase.auth().currentUser;\n                  return _context.abrupt(\"return\", {\n                    user: user\n                  });\n\n                case 6:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        function getInitialProps(_x) {\n          return _getInitialProps.apply(this, arguments);\n        }\n\n        return getInitialProps;\n      }()\n    }]);\n\n    function _class(props) {\n      var _this;\n\n      _classCallCheck(this, _class);\n\n      _this = _super.call(this, props);\n      _this.state = {\n        status: 'LOADING'\n      };\n      return _this;\n    }\n\n    _createClass(_class, [{\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        if (this.props.user) {\n          this.setState({\n            status: 'SIGNED_IN'\n          });\n        } else {\n          router.push('/login');\n        }\n      }\n    }, {\n      key: \"renderContent\",\n      value: function renderContent() {\n        var status = this.state.status;\n\n        if (status == 'LOADING') {\n          return __jsx(\"h1\", null, \"Loading ......\");\n        } else if (status == 'SIGNED_IN') {\n          return __jsx(Component, this.props);\n        }\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        return __jsx(React.Fragment, null, this.renderContent());\n      }\n    }]);\n\n    return _class;\n  }(React.Component);\n};\n\nexport default withAuth;","map":null,"metadata":{},"sourceType":"module"}